{"version":3,"sources":["components/Label/styles.module.css","components/Input/styles.module.css","components/Settings/styles.module.css","components/Button/styles.module.css","components/Root/styles.module.css","components/Label/index.tsx","components/Input/index.tsx","components/Settings/index.tsx","components/Button/index.tsx","components/Graph/setupChartsOptions.ts","components/Graph/index.tsx","utils/computeCoordinates.ts","components/Root/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Label","props","children","text","className","cn","styles","root","Input","value","onChange","target","Settings","setProbability","setIterations","iterations","probability","probabilityLabel","Button","onClick","setupChartsOptions","coordinates","title","subtitle","yAxis","min","max","xAxis","legend","layout","align","verticalAlign","plotOptions","series","label","connectorAllowed","pointStart","name","data","responsive","rules","condition","maxWidth","chartOptions","Graph","memo","useEffect","Highcharts","chart","id","castStringToNumber","val","parseInt","computeCoordinates","probabilityRaw","iterationsRaw","totalActions","range","reduce","acc","currentIteration","index","currentSuccessRate","Math","random","push","mean","Object","fromEntries","URLSearchParams","window","location","search","entries","initialProbability","initialIterations","App","useState","showGraph","setupGraph","Url","URL","href","searchParams","set","UrlString","toString","history","pushState","path","updateUrl","button","Boolean","hostname","match","ReactDOM","render","Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4396ed7e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__12sm_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__1GVI-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputGroup\":\"styles_inputGroup__27CsM\",\"probabilityLabel\":\"styles_probabilityLabel__35tn_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__26K_f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"styles_button__2xc82\"};","import React, {ReactChild} from 'react';\nimport cn from 'classnames';\n\nimport {ClassName} from '../../types';\n\nimport styles from './styles.module.css';\n\ntype Props = {\n    children: ReactChild,\n    className?: ClassName,\n    text: string;\n}\n\nconst Label = (props: Props) => {\n    const {children, text, className} = props;\n\n    return (\n        <label className={cn(styles.root, className)}>\n            {text}\n\n            {children}\n        </label>\n    );\n};\n\nexport default Label;\n","import React from 'react';\n\nimport {DispatchSetStateActionString} from '../../types';\n\nimport styles from './styles.module.css';\n\ntype Props = {\n    value: string;\n    onChange: DispatchSetStateActionString;\n}\n\nconst Input = (props: Props) => {\n    const {value, onChange} = props;\n\n    return (\n        <input value={value} onChange={({target: {value}}) => {\n\n            onChange(value);\n        }} className={styles.root} />\n    );\n};\n\nexport default Input;\n","import React from 'react';\n\nimport Label from '../Label';\nimport Input from '../Input';\n\nimport {DispatchSetStateActionString} from '../../types';\n\nimport styles from './styles.module.css';\n\ntype Props = {\n    iterations: string;\n    probability: string;\n    setProbability: DispatchSetStateActionString;\n    setIterations: DispatchSetStateActionString;\n}\n\nconst Settings = (props: Props) => {\n    const {setProbability, setIterations, iterations, probability} = props;\n\n    return (\n        <div>\n            <Label className={styles.probabilityLabel} text=\"Probability %\">\n                <Input value={probability} onChange={setProbability} />\n            </Label>\n\n            <Label text=\"Iterations count\">\n                <Input value={iterations} onChange={setIterations} />\n            </Label>\n        </div>\n    );\n};\n\nexport default Settings;\n","import React, {MouseEvent} from 'react';\nimport cn from 'classnames';\n\nimport {ClassName} from '../../types';\n\nimport styles from './styles.module.css';\n\ntype Props = {\n    text: string;\n    className?: ClassName;\n    onClick: (e: MouseEvent<HTMLElement>) => void;\n}\n\nconst Button = (props: Props) => {\n    const {text, onClick, className} = props;\n\n    return (\n        <button className={cn(styles.root, className)} onClick={onClick}>\n            {text}\n        </button>\n    );\n};\n\nexport default Button;\n","\nimport {Coordinates} from '../../types';\n\nconst setupChartsOptions = (coordinates: Coordinates) => {\n    return {\n        title: {\n            text: ' Total event fired percent per iteration count'\n        },\n\n        subtitle: {\n            text: 'Source: https://github.com/akimy'\n        },\n\n        yAxis: {\n            min: 0,\n            max: 100,\n            title: {\n                text: '%'\n            }\n        },\n\n        xAxis: {\n            title: {\n                text: 'iterations'\n            }\n        },\n\n        legend: {\n            layout: 'vertical',\n            align: 'right',\n            verticalAlign: 'middle'\n        },\n    \n        plotOptions: {\n            series: {\n                label: {\n                    connectorAllowed: false\n                },\n                pointStart: 1\n            }\n        },\n\n        series: [{\n            name: 'Current probability total %',\n            data: coordinates,\n        }],\n\n        responsive: {\n            rules: [{\n                condition: {\n                    maxWidth: 500\n                },\n                chartOptions: {\n                    legend: {\n                        layout: 'horizontal',\n                        align: 'center',\n                        verticalAlign: 'bottom'\n                    }\n                }\n            }]\n        },\n    }\n}\n\nexport default setupChartsOptions;\n","// @ts-nocheck\nimport React, {useEffect, memo} from 'react';\nimport Highcharts from 'highcharts'; \n\nimport setupChartsOptions from './setupChartsOptions';\n\nimport {Coordinates} from '../../types';\n\n\ntype Props = {\n    coordinates: Coordinates,\n};\n\nconst Graph = memo((props: Props) => {\n    const {coordinates} = props;\n\n    useEffect(() => {\n        Highcharts.chart('graph', setupChartsOptions(coordinates));   \n    })\n\n    return (\n        <div id=\"graph\" />\n    )\n});\n\nexport default Graph;\n","// @ts-nocheck\nimport {range, mean} from 'ramda';\nimport {HtmlInputString} from '../types';\n\nconst castStringToNumber = (val: string): number => parseInt(val, 10);\n\n/**\n * '70' => 70% => 0.7 probability\n */\nconst castInputStringToProbabilityNumber = (val: HtmlInputString): number => {\n    return castStringToNumber(val) * 0.01;\n}\n\nconst computeCoordinates = (probabilityRaw: string, iterationsRaw: string) => {\n    let [probability, iterations] = [castInputStringToProbabilityNumber(probabilityRaw), castStringToNumber(iterationsRaw)];\n\n    if (probability > 1) {\n        probability = 1;\n    }\n\n    const totalActions: number[] = [];\n\n    return range(1, iterations).reduce((acc, currentIteration, index): number[] => {\n        const isCurrentIterationSuccess: boolean = Math.random() <= probability;\n        const currentSuccessRate: 0 | 100 = isCurrentIterationSuccess ? 100 : 0;\n\n        totalActions.push(currentSuccessRate);\n\n        /**\n         * mean(3, 7, 8) === 6 \n         */\n        acc.push(mean(totalActions));\n\n        return acc;\n    }, []);\n}\n\nexport default computeCoordinates;\n","import React, {useState, useEffect} from 'react';\n\nimport Settings from '../Settings';\nimport Button from '../Button';\nimport Graph from '../Graph';\n\nimport styles from './styles.module.css';\nimport computeCoordinates from '../../utils/computeCoordinates';\n\nimport {DispatchSetStateActionString} from '../../types';\n\nconst getAllSearchParamsKeys = (keys: string[]) => {\n    return Object.fromEntries(new URLSearchParams(window.location.search).entries());\n}\n\nconst updateUrl = ({probability, iterations}: {probability: string, iterations: string}): void => {\n    const Url = new URL(window.location.href);\n    Url.searchParams.set('probability', probability)\n    Url.searchParams.set('iterations', iterations);\n\n    const UrlString = Url.toString();\n\n    window.history.pushState({path: UrlString}, '', UrlString);\n}\n\nconst {probability=\"62\", iterations=\"50\"} = getAllSearchParamsKeys(['probability', 'iterations']);\nconst initialProbability = probability;\nconst initialIterations = iterations;\n\nfunction App() {\n    const [probability, setProbability]: [string, DispatchSetStateActionString] = useState(initialProbability);\n    const [iterations, setIterations]: [string, DispatchSetStateActionString] = useState(initialIterations);\n    const [{showGraph, coordinates}, setupGraph] = useState({showGraph: false, coordinates: [0]});\n\n    const handleButtonClick = () => {\n        const coordinates = computeCoordinates(probability, iterations);\n\n        setupGraph({showGraph: true, coordinates});\n    }\n\n    useEffect(() => {\n        updateUrl({probability, iterations});\n\n        const coordinates = computeCoordinates(probability, iterations);\n        \n        setupGraph({showGraph: true, coordinates});\n    }, [iterations, probability]);\n\n\n    return (\n        <div>\n            <Settings \n                probability={probability} \n                iterations={iterations}\n                setProbability={setProbability}\n                setIterations={setIterations}\n            />\n\n            <Button className={styles.button} onClick={handleButtonClick} text=\"Run\" />\n\n            {showGraph && (\n                <div>\n                    <Graph coordinates={coordinates} />\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './components/Root';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}